<project name="cortado" default="all" basedir=".">

    <description>
Cortado ANT build file
    </description>

  <!-- ==================================== -->
  <!-- ======== PROPERTY DEFINITION ======= -->
  <!-- ==================================== -->

  <property file="build.config"/>
  <property file="build.properties"/>

  <property name="src"                value="${basedir}/src"/>
  <property name="examples"           value="${basedir}/examples"/>
  <property name="config"             value="${basedir}/config"/>
  <property name="archive"            value="${basedir}/archive"/>

  <property name="out"                value="${basedir}/output"/>
  <property name="out.dist"           value="${out}/dist"/>
  <property name="out.dist.examples"  value="${out.dist}/examples"/>


  <!-- we are still in autotool withdrawal -->
  <property name="prefix"      location="/usr/local" />
  <property name="exec_prefix" location="${prefix}" />
  <property name="libdir"      location="${exec_prefix}/lib" />
  <property name="datadir"     location="${prefix}/share" />

  <!-- read a file containing properties for plugins to build -->
<!--
  <property file="plugins.properties" />
-->

<!-- a helper macro -->
  <macrodef name="propertycopy">
    <attribute name="name"/>
    <attribute name="from"/>
    <sequential>
      <property name="@{name}" value="${@{from}}"/>
    </sequential>
  </macrodef>

  <!-- figure out what build type we are using and set build.${type} stuff -->
  <target name="type">
    <echo message="Building ${build.type} version" />
    <propertycopy name="build.flags" from="build.${build.type}.flags" />
    <!-- we make out.build depend on the release type -->
    <property name="out.build"   value="${out}/build/${build.type}" />
  </target>

  <!-- show us some info to make sure we are checking things correctly -->
  <target name="info" depends="type">
    <echo message="compiler: ${build.compiler}" />
    <echo message="compile flags: ${build.flags}" />
    <echo message="out.build: ${out.build}" />
  </target>

  <target name="init" depends="type">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${out}"/>
    <mkdir dir="${out.build}"/>
    <mkdir dir="${out.dist}/${build.type}"/>
    <mkdir dir="${out.dist}/applet"/>
  </target>

<!-- generate Configure-time options class as src/com/fluendo/player/Configure.java -->
  <target name="configure">
    <tstamp>
      <format property="DATE" pattern="yyyy-MM-dd" />
   </tstamp>

    <echo file="${src}/com/fluendo/player/Configure.java" append="true"
>
package com.fluendo.player;

class Configure
{
  public String buildInfo = "Built on ${DATE} (version ${product.version}) in ${build.type} mode.";

  public Configure() {
  }
}
    </echo>
    <echo
>Built on ${DATE} (version ${product.version}) in ${build.type} mode.</echo>
  </target>

<!-- prepare plugin.*.true variables  by parsing the exclude property-->
  <target name="plugins">
    <condition property="plugin.JPEG.false">
      <contains string="${exclude}" substring="JPEG" casesensitive="false" />
    </condition>
    <condition property="plugin.Mulaw.false">
      <contains string="${exclude}" substring="Mulaw" casesensitive="false" />
    </condition>
    <condition property="plugin.MultiPart.false">
      <contains string="${exclude}" substring="MultiPart" casesensitive="false" />
    </condition>
    <condition property="plugin.Ogg.false">
      <contains string="${exclude}" substring="Ogg" casesensitive="false" />
    </condition>
    <condition property="plugin.Smoke.false">
      <contains string="${exclude}" substring="Smoke" casesensitive="false" />
    </condition>
    <condition property="plugin.Theora.false">
      <contains string="${exclude}" substring="Theora" casesensitive="false" />
    </condition>
    <condition property="plugin.Vorbis.false">
      <contains string="${exclude}" substring="Vorbis" casesensitive="false" />
    </condition>
   </target>

<!-- generate includes and plugins.ini based on contents of exclude -->
  <target name="includes"
          depends="plugins,includes-delete,include-JPEG,include-Mulaw,include-MultiPart,include-Ogg,include-Smoke,include-Theora,include-Vorbis">
    <echo>Generating ${out.build}/includes</echo>
  </target>

  <target name="includes-delete" depends="init">
    <touch file="${out.build}/includes" />
    <delete file="${out.build}/includes" />
    <echo file="${out.build}/includes" append="true"
>com/fluendo/player/*
com/fluendo/utils/*
com/fluendo/jst/*
com/fluendo/plugin/AudioSink*
com/fluendo/plugin/VideoSink**
com/fluendo/plugin/HTTPSrc*
com/fluendo/plugin/Queue*
plugins.ini
</echo>
    <echo file="${out.build}/plugins.ini"
>com.fluendo.plugin.HTTPSrc
>com.fluendo.plugin.VideoSink
>com.fluendo.plugin.AudioSinkJ2
>com.fluendo.plugin.AudioSinkSA
>com.fluendo.plugin.Queue
</echo>
 
  </target>

  <target name="include-JPEG" unless="plugin.JPEG.false">
    <echo>Including JPEG</echo>
    <echo file="${out.build}/includes" append="true"
>com/fluendo/plugin/JPEG*
</echo>
    <echo file="${out.build}/plugins.ini" append="true"
>com.fluendo.plugin.JPEGPlugin
</echo>
  </target>

  <target name="include-Mulaw" unless="plugin.Mulaw.false">
    <echo>Including Mulaw</echo>
    <echo file="${out.build}/includes" append="true"
>com/fluendo/plugin/Mulaw*
</echo>
    <echo file="${out.build}/plugins.ini" append="true"
>com.fluendo.plugin.MulawPlugin
</echo>
  </target>

  <target name="include-MultiPart" unless="plugin.MultiPart.false">
    <echo>Including MultiPart</echo>
    <echo file="${out.build}/includes" append="true"
>com/fluendo/plugin/MultiPart*
</echo>
    <echo file="${out.build}/plugins.ini" append="true"
>com.fluendo.plugin.MultiPartPlugin
</echo>
  </target>

  <target name="include-Ogg" unless="plugin.Ogg.false">
    <echo>Including Ogg</echo>
    <echo file="${out.build}/includes" append="true"
>com/jcraft/jogg/*
fluendo/plugin/Ogg*
</echo>
    <echo file="${out.build}/plugins.ini" append="true"
>com.fluendo.plugin.OggPlugin
</echo>
  </target>

  <target name="include-Smoke" unless="plugin.Smoke.false">
    <echo>Including Smoke</echo>
    <echo file="${out.build}/includes" append="true"
>com/fluendo/codecs/Smoke*
com/fluendo/plugin/Smoke*
</echo>
    <echo file="${out.build}/plugins.ini" append="true"
>com.fluendo.plugin.SmokePlugin
</echo>
  </target>

  <target name="include-Theora" unless="plugin.Theora.false">
    <echo>Including Theora</echo>
    <echo file="${out.build}/includes" append="true"
>com/fluendo/jheora/*
com/fluendo/plugin/Theora*
</echo>
    <echo file="${out.build}/plugins.ini" append="true"
>com.fluendo.plugin.TheoraPlugin
</echo>
  </target>

  <target name="include-Vorbis" unless="plugin.Vorbis.false">
    <echo>Including Vorbis</echo>
    <echo file="${out.build}/includes" append="true"
>com/jcraft/jorbis/*
com/fluendo/plugin/Vorbis*
</echo>
    <echo file="${out.build}/plugins.ini" append="true"
>com.fluendo.plugin.VorbisPlugin
</echo>
  </target>

<!-- COMPILATION -->

  <!-- FIXME: not used currently -->
  <!-- set compiler flags -->
  <target name="compile-flags">

      <!-- jikes seemed to use to ignore the target settings, so we had
           additional settings.  This seems to work fine now though -->
<!--
      <condition property="compiler.flags.target" value="-target 1.1">
        <equals arg1="${build.compiler}" arg2="jikes" />
      </condition>
-->
  </target>

  <!-- determine if we need to use stubs -->
  <!--- FIXME: for now always enable, and see if it causes problems for
        a Sun build -->
  <target name="compile-stubs">
      <condition property="stubs" value="stubs">
<!--
        <equals arg1="${build.compiler}" arg2="jikes" />
-->
        <equals arg1="true" arg2="true" />
      </condition>
  </target>

<!-- FIXME: figure out how to use this in the other compile section -->
  <target name="compile-jcraft"
          description="compile the JCraft source"
          depends="init"
   >
    <!-- Compile the java code from ${src} into ${out.build}
         and ignore warnings on it since it's not our code -->
    <javac 
           srcdir="${src}" 
           destdir="${out.build}" 
           target="1.1"
           nowarn="yes"
    >
      <include name="com/jcraft/jogg/*" />
      <include name="com/jcraft/jorbis/*" />
      <compilerarg line="${build.flags}" />
    </javac>
  </target>

<!-- FIXME: figure out how to use this in the other compile section -->
  <target name="compile-utils"
          description="compile com.fluendo.utils source"
          depends="init"
   >
    <javac 
           destdir="${out.build}" 
           target="1.1"
           nowarn="yes"
    >
      <src path="${src}/com/fluendo/utils" />
      <compilerarg line="${build.flags}" />
    </javac>
  </target>

  <target name="compile-jheora"
          description="compile com.fluendo.jheora source"
          depends="init,compile-utils"
   >
    <javac 
           destdir="${out.build}" 
           target="1.1"
    >
      <src path="${src}/com/fluendo/jheora" />
      <compilerarg line="${build.flags}" />
    </javac>
  </target>

  <target name="compile-codecs"
          description="compile com.fluendo.codecs source"
          depends="init,compile-utils"
   >
    <javac 
           destdir="${out.build}" 
           target="1.1"
    >
      <src path="${src}/com/fluendo/codecs" />
      <compilerarg line="${build.flags}" />
    </javac>
  </target>

   <target name="compile-jst"
          description="compile com.fluendo.jst source"
          depends="init,compile-utils"
   >
    <javac 
           destdir="${out.build}" 
           target="1.1"
    >
      <src path="${src}/com/fluendo/jst" />
      <compilerarg line="${build.flags}" />
    </javac>
  </target>

   <target name="compile-plugin"
          description="compile com.fluendo.plugin source"
          depends="init,compile-jst,compile-jheora,compile-codecs"
   >
    <javac 
           destdir="${out.build}" 
           target="1.1"
    >
      <src path="${src}/com/fluendo/plugin" />
      <compilerarg line="${build.flags}" />
    </javac>
  </target>
   
  <target name="compile"
          description="compile the source"
          depends="init,configure,compile-stubs,compile-jcraft,compile-jst,compile-jheora,compile-codecs,compile-plugin"
   >
    <!-- Compile the java code from ${src} into ${out.build} -->
    <!-- possibly using our stubs as classpath, and with a 1.1 target -->
<!--
          depends="compile-flags"
           debug="${project.build.debug}"
           debug="true" debuglevel="lines,vars,source"
-->

<!-- note: ant 1.6.5 does handle debuglevel for jikes, but 1.6.2 doesn't -->
    <javac 
           classpath="${stubs}"
           destdir="${out.build}" 
           debug="true"
           debuglevel="none"
           target="1.1">
      <src path="${src}/com/fluendo/player" />
      <compilerarg line="${build.flags}" />

<!-- FIXME: -g:none should be handleable by debuglevel above
      <compilerarg line="${compiler.flags.target} -g:none" />
      <compilerarg line="${compiler.flags.target}" />
-->
    </javac>
  </target>

  <!-- generate plugins.ini -->
  <target name="plugins.ini">
    <copy todir="${out.build}">
      <fileset file="plugins.ini" />
    </copy>
  </target>

<!-- clean out unwanted plugins -->
  <target name="testcheck" if="test">
    <condition property="testyes">
      <equals arg1="${test}" arg2="yes" />
    </condition>
  </target>

  <target name="test" if="testyes" depends="testcheck">
    <echo>${test}</echo>
  </target>

<!-- JAR CREATION -->
  <target name="jar-jcraft" depends="compile-jcraft">
    <jar jarfile="${out.dist}/${build.type}/jcraft.jar" basedir="${out.build}"
         includes="com/jcraft/*/*" />
  </target>

  <target name="jar-utils" depends="compile-utils">
    <jar jarfile="${out.dist}/${build.type}/utils.jar" basedir="${out.build}"
         includes="com/fluendo/utils/*" />
  </target>

  <target name="jar-jheora" depends="compile-jheora">
    <jar jarfile="${out.dist}/${build.type}/jheora.jar" basedir="${out.build}"
         includes="com/fluendo/jheora/*" />
  </target>

  <target name="jar-jst" depends="compile-jst">
    <jar jarfile="${out.dist}/${build.type}/jst.jar" basedir="${out.build}"
         includes="com/fluendo/jst/*" />
  </target>
  <target name="jar-codecs" depends="compile-codecs">
    <jar jarfile="${out.dist}/${build.type}/codecs.jar" basedir="${out.build}"
         includes="com/fluendo/codecs/*" />
  </target>
  <target name="jar-plugin" depends="compile-plugin">
    <jar jarfile="${out.dist}/${build.type}/plugin.jar" basedir="${out.build}"
         includes="com/fluendo/plugin/*" />
  </target>

<!-- applet targets -->
  <target name="applet-ovt" depends="compile"
          description="generate the Ogg/Vorbis+Theora applet">
    <antcall target="includes">
      <param name="exclude" value="Smoke,Jpeg,MultiPart,Mulaw" />
    </antcall>
    <jar jarfile="${out.dist}/applet/cortado-ovt-${build.type}-${product.version}.jar"
         includesfile="${out.build}/includes"
         basedir="${out.build}">
    </jar>
  </target>

  <target name="applet-ov" depends="compile"
          description="generate the Ogg/Vorbis applet">
    <antcall target="includes">
      <param name="exclude" value="Smoke,Jpeg,MultiPart,Mulaw,Theora" />
    </antcall>
    <jar jarfile="${out.dist}/applet/cortado-ov-${build.type}-${product.version}.jar"
         includesfile="${out.build}/includes"
         basedir="${out.build}">
    </jar>
  </target>

  <target name="applet-mmjs" depends="compile"
          description="generate the Multipart/Mulaw+Smoke+Jpeg applet">
    <antcall target="includes">
      <param name="exclude" value="Ogg,Vorbis,Theora" />
    </antcall>
    <jar jarfile="${out.dist}/applet/cortado-mmjs-${build.type}-${product.version}.jar"
         includesfile="${out.build}/includes"
         basedir="${out.build}">
    </jar>
  </target>


  <target name="applet" depends="applet-ovt,applet-ov,applet-mmjs"
           description="generate all applets" />

  <target name="jar" depends="jar-jcraft,jar-utils,jar-jheora,jar-jst,jar-codecs,jar-plugin"
        description="generate all jar files" />

  <target name="all" depends="applet,jar"
          description="generate jars and applets" />

  <target name="debug"
          description="generate all jars and applets in debug mode">
    <antcall target="all">
      <param name="build.type" value="debug" />
    </antcall>
  </target>

  <target name="release"
          description="generate all jars and applets in release mode">
    <antcall target="all">
      <param name="build.type" value="release" />
    </antcall>
  </target>

  <target name="install" depends="jar"
          description="install cortado">
    <!-- Create the installation locations -->
    <mkdir dir="${libdir}/cortado"/>

    <!-- Put everything in ${out.build} into $libdir/cortado -->
    <copy todir="${libdir}/cortado">
      <fileset dir="out.build">
        <include name="com/jcraft/*/*.class"/>
        <include name="com/fluendo/*/*.class"/>
        <include name="${out.build}/applet/cortado.jar"/>
      </fileset>
    </copy>

    <!-- Install documentation -->
    <copy todir="${datadir}/cortado-${product.version}">
      <fileset dir=".">
        <include name="LICENSE.*"/>
        <include name="TODO"/>
      </fileset>
    </copy>
  </target>

  <target name="clean" depends="type"
        description="clean up build dir" >
    <!-- Delete the ${out.build} directory tree an generated source -->
    <delete dir="${out.build}"/>
    <delete dir="${out.dist}/${build.type}"/>
    <delete file="${src}/com/fluendo/player/Configure.java"/>
  </target>
</project>
